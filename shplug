#!/usr/bin/env sh

RED='\033[91m'
GRN='\033[92m'
RST='\033[0m'

# for testing we define vars locally
SHPLUG_DIR="$PWD"/_shplug/
SHPLUG_SRC="$PWD"/_shplug/src/
SHPLUG_BIN="$PWD"/_shplug/bin/

QDELIM='	|||	'

have() {
    [ -n "$(command -v "$1")" ]
}

http_get() {
    { have wget && wget -qO- "$1"; } ||
    { have curl && curl -s "$1"; }
}

http_download() {
    { have wget && wget -q "$1"; } ||
    { have curl && curl -sO "$1"; }
}

log() {
    lvl="$1"; shift 1

    echo "$0:$lvl: $*" >&2
}

err() {
    log Err "$@"
}

have() {
    command -v "$1" >/dev/null
}

sed_unbuf() {
    while read -r line; do
        echo "$line" | sed "$@"
    done
}

fd_apply() {
    {
        eval "$@" 3>&1 1>&2 2>&3 |

        eval "${ERR:-cat}"

    } 3>&1 1>&2 2>&3 3>&- |

    eval "${OUT:-cat}"
}

cursor() {
    case "$1" in
        up)
            printf "\\033[%sA" "$2" ;;
        down)
            printf "\\033[%sB" "$2" ;;
        home)
            printf "\\r" ;;
        clear)
            mode=2
            case "$2" in
                end)   mode=0 ;;
                start) mode=1 ;;
                line)  mode=2 ;;
            esac

            printf "\\033[%sK" "$mode";;
    esac
}

escape_rgx() {
    echo "$1" | sed 's/[^^]/[&]/g; s/\^/\\^/g'
}

extract() {
    archive_path="$1"
    archive_name="$(basename -- "$archive_path")"
    archive_ext="$(echo "$archive_name" | sed 's/.*\.\([0-9a-zA-Z.]\+\)/\1/')"

    eval "extract__$archive_ext"' $@'
}

extract__tgz() { 
    archive_path="$1"
    target_path="$2" 

    mkdir -p "$target_path"
    tar -xvzf "$archive_path" -C "$target_path"

}

spinner() {
    frames='\|/-'
    while sleep 0.15; do
        frames=$(echo "$frames" | sed 's/\(.\)\(...\)/\2\1/')
        frame=$(echo "$frames" | cut -c1)

        printf '%s %s (%s)\n' "$frame" "$1" "$2"
    done &
    pid=$!

    wait "$2"
    exit_stat=$?
    kill "$pid"
    wait "$pid" 2>/dev/null

    return $exit_stat
}

entry_get_download_url() {
    short_path="$(entry_get short)"
    from="$(entry_get from)"
    case "$(entry_get from)" in
        gh)
            printf 'https://github.com/%s' "$short_path"
            ;;
        gh-r)
            http_get "https://api.github.com/repos/$short_path/releases" |
                grep browser_download_url |
                grep "$(entry_get use)" |
                head -n1 |
                cut -d\" -f4
            ;;
        *)
            echo "Unknown source: '$from'" >&2
            return 1
            ;;
    esac
}

entry_get_path() {
    # entry="$1"
    id="$(entry_get id)"
    short="$(entry_get short)"

    echo "$SHPLUG_SRC/$id.$(echo "$short" | sed 's/\//./')"
}

entry_get() {
    [ -n "$ENTRY" ] || { echo "entry is null" >&2; return 255; }

    case "$1" in
        id)         index=1 ;;
        short)      index=2 ;;
        from)       index=3 ;;
        use)        index=4 ;;
        rename-to)  index=5 ;;
        at)         index=6 ;;
        hook-build) index=7 ;;

        url)
            entry_get_download_url
            return $?
            ;;
        path)
            entry_get_path
            return $?
            ;;
        *)
            return 1
            ;;
    esac

    # echo "$2" | cut -d"$QDELIM" -f "$index"
    printf -- '%s\n' "$ENTRY" |
    awk                            \
        -F "$(
                echo "$QDELIM" |
                sed 's/|/\\\\|/g'
            )"                     \
        '{$0=$'"$index"'}1'
}

read_str() {
    var="$1"; shift
    read -r "$@" <<EOF
$var
EOF
}

forward_fun() {
    fun="$1"; shift 1

    # entry="$1"
    from="$(entry_get from)"
    eval "$(echo "$from" | sed 's/-/_/')__${fun} \"\$@\""
}

# parse_entry() {
#     entry="$1"
#     IFS='	' read_str "$@";
# }

is_cloned() {
    # entry="$1"
    path="$(entry_get path)"
    [ -d "$path" ] && [ -n "$(ls -qAL -- "$path")" ]
}

# subshell since it performs some `cd`s
clone() (
    # entry="$1"
    # parse_entry "$entry" id=id short_path=shpth url=url rest
    # short_path="$(entry_get short "$entry")"

    url="$(entry_get url)"
    path="$(entry_get path)"

    if is_cloned "$ENTRY"; then
        echo "Directory: '$path' already exists!" >&2
        echo "Directory exists, assuming package already cloned..."
        # return 1
        return 0
    fi

    { [ -d "$path" ] || mkdir "$path" && cd "$path"; } ||
        { echo "Directory creation failed!"; return 1; }

    case "$(entry_get from)" in
        gh)
            git clone "$url" ./ 1>&2
            ;;
        gh-r)
            http_download "$url" 1>&2
            ;;
    esac &

    if spinner "Cloning $short_path" $!; then
        echo "Done clone!"
        return 0
    else
        echo "Failed clone!"
        return 1
    fi
)

# install() {
#     entry="$1"


#     if clone "$entry"; then

#     fi
# }

is_up_to_date() (
    forward_fun is_up_to_date "$@"
)

gh__is_up_to_date() {
    # entry="$1"
    path="$(entry_get_path)"

    cd "$path" || return 255
    git fetch >&2 &
    spinner "Fetching remote information..." $! ||
        { echo "Error fetching remote info"; return 255; }

    if [ "$(git rev-parse HEAD)" = "$(git rev-parse '@{u}')" ]; then
        return 0
    fi
    return 1
}

gh_r__is_up_to_date() {
    return 1
}

fetch() ( forward_fun fetch "$@"; )

gh__fetch() {
    # entry="$1"
    path="$(entry_get_path)"
    at="$(entry_get at)"

    if ! [ "$at" = "latest" ]; then
        #FIXME: Implement `at` tag
        echo
    fi

    cd "$path" &&
    {
        git fetch >&2 &
        spinner "Fetching remote information" $! ||
        echo "Error fetching remoote info"
    } &&
    {
        git pull >&2 &
        spinner "Pulling changes..." $! &&
        echo "Done pulling changes" ||
        echo "Error pulling changes"
    }
}

gh_r__fetch() {
    # entry="$1"
    path="$(entry_get_path)"

    rm -rf "$path"
    clone "$@"
}

sync() {
    [ -n "$ENTRY" ] || { echo "entry is null" >&2; return 255; }
    # entry="$1"
    # shift

    force=$([ "${*#*--force}" != "$*" ] && echo 1)

    short_name="$(entry_get short)"

    echo "Synchronizing $short_name..."

    if ! is_cloned; then
        clone
    else
        [ -z "$force" ] && is_up_to_date #"$ENTRY"
        exit_stat=$?


        if [ $exit_stat -eq 0 ]; then
            echo "$short_name is already up to date!"
        elif [ $exit_stat -eq 1 ]; then
            fetch "$ENTRY"
        else
            echo "something went wrong..."
            return 1
        fi
    fi

}

install() {
    echo "Making sure the bin folder is present..."
    mkdir -p "$SHPLUG_BIN" || return 255
    forward_fun install "$@"
}

gh_r__install() (
    # entry="$1"
    path="$(entry_get path)"

    cd "$path" || return 255

    archive_name="$(basename -- "$(find . | sed -n '2p')")"
    extract "$archive_name" "extracted" >&2 &
    spinner "Extracting package..." $! || { echo "Failed to extract package!"; return 255; }
    echo "Done extracting package"

    bin_name="$(basename -- "$(find ./extracted | sed -n '2p')")"

    new_name="$(entry_get rename-to)"
    new_name="${new_name:-$bin_name}"

    ln -s \
        "$PWD/extracted/$bin_name" \
        "$SHPLUG_BIN/$new_name"

    echo "Done installation"

    # archive_ext="$(echo "$archive_name" | sed 's/.*\.\([0-9a-zA-Z.]\+\)/\1/')"

    # eval "extract__$archive_ext"' $archive_name extracted'
)

gh__install() (
    # entry="$1"
    path="$(entry_get path)"

    cd "$path" || return 255

    #run installation command
    sh -c "$(entry_get hook-build)" >&2 &
    spinner "Running build hook..." $! || { echo "Build hook failed!"; return 255; }
    echo "Done running build hook"


    pat="$(entry_get use)"
    pat_e="$(echo "$pat" | sed 's/\//\\\//g')"
    new_name="$(entry_get rename-to)"
    printf  'bin name: %s\n' "$new_name" >&2

    # if [ -n "$new_name" ]; then
        find . | sed -n '/^\.\/'"$pat_e"'$/p' |
            while read -r match; do
                if [ -n "$new_name" ]; then
                    printf  'bin name: %s\n' "$new_name" >&2
                    ln -s \
                        "$PWD/$match" \
                        "$SHPLUG_BIN/$(
                            echo "$match" |
                            sed 's/^\.\/'"$pat_e"'$'"/$new_name/"
                        )" >&2 ||
                    return 255
                else
                    ln -s \
                        "$PWD/$match" \
                        "$SHPLUG_BIN" >&2 ||
                    return 255
                fi

            done
    # else
    #     # we want globbing!
    #     __p="$PWD/$pat"
    #     echo $__p >&2
    #     # shellcheck disable=SC2086
    #     ln -s $__p "$SHPLUG_BIN" >&2 ||
    #         return 255
    # fi

    echo "Done installation"
)

get_param() {
    # param="$(echo "$1" | sed -n 's/^.*[[:space:]]\+'"$2"':\([[:alnum:]-]\+\)/\1/p')"
    tag=$1; shift 1
    for arg in "$@"; do
        param="$(echo "$arg" | sed -n 's/^'"$tag"':\(.*\)$/\1/p')"
        if [ -n "$param" ]; then
            echo "$param"
            return 0
        fi
    done
    return 1
    # param="$(echo "$1" | sed -n 's/^.*[[:space:]]\+'"$2"':\([^[:space:]]\+\).*$/\1/p')"
    # if [ -z "$param" ]; then
    #     return 1
    # else
    #     echo "$param"
    # fi
}

register() {
    mkdir -p "$SHPLUG_DIR"
    queue_file="$SHPLUG_DIR/queue"
    touch "$queue_file"

    short_path="$1"

    if [ -z "$short_path" ]; then
        err "missing repository url!"
        exit 1
    fi

    from="$(
        get_param from "$@" || echo gh
        )"

    use="$(
        get_param use "$@" ||
        {
            case "$from" in
                gh)   echo '\[^/\]*\.sh';;
                gh-r) echo 'linux.*64';;
            esac
        })"

    rename_to="$(
        get_param rename-to "$@" || :
        )"

    at="$(
        get_param at "$@" ||
        echo latest
        )"

    hook_build="$(
        get_param hook-build "$@" ||
        echo :
        )"

    id="$(wc -l "$queue_file" | cut -d' ' -f1)"
    id="$((id + 1))"
    # queue_entry="$id	$short_path	$from	,|,	$use	,|,	$at	,|,	$hook_build"

    queue_entry="$(
        printf '%s%s%s%s%s%s%s%s%s%s%s' \
            "$id"         "$QDELIM"     \
            "$short_path" "$QDELIM"     \
            "$from"       "$QDELIM"     \
            "$use"        "$QDELIM"     \
            "$rename_to"  "$QDELIM"     \
            "$at"         "$QDELIM"     \
            "$hook_build"               \
        )"

    echo "$queue_entry" >> "$queue_file"
}

task() {
    id="$1"
    task="$2"
    shift 2

    OUT="sed_unbuf 's/^/$id	stat	/'"          \
    ERR="sed_unbuf 's/^/$id	/'"                  \
        fd_apply                                 \
            eval "$task" "$@"               "&&" \
            echo "SUCCESS:$id" ">>$LOGFILE" "||" \
            echo "FAIL:$id"    ">>$LOGFILE"      \
        2>>"$LOGFILE"

    {
        short_path="$(entry_get short)"
        succ="$(grep -q "^SUCCESS:$id\$" "$LOGFILE" && echo t)"
        fail="$(grep -q "^FAIL:$id\$"    "$LOGFILE" && echo t)"

        if [ -n "$SHPLUG_DEBUG""$succ" ] || [ -n "$fail" ] ; then
            [ -n "$succ" ] && { stat=succeded color="$GRN"; }
            [ -n "$fail" ] && { stat=failed   color="$RED"; }

            printf '%s(%s) %s %s:%s\n' \
                "$color"               \
                "$id"                  \
                "$short_path"          \
                "$stat"                \
                "$RST"


            sed -n 's/'"$id"'	\(.*\)/	\1/p' < "$LOGFILE"

        fi

    } | sed "s/^/$id	log	/"
}

run() {
    rm -rf "$SHPLUG_DIR/tmp/*"
    mkdir -p "$SHPLUG_SRC"
    mkdir -p "$SHPLUG_DIR/tmp/"

    queuefile="$SHPLUG_DIR/queue"
    logfile="$SHPLUG_DIR/log"
    touch "$queuefile"
    # rm -f "$logfile"
    # touch "$logfile"
    printf '' >"$logfile"

    task=$1; shift
    max_id=$(wc -l "$queuefile" | cut -d' ' -f1)

    for _ in $(seq 1 "$max_id"); do
        printf '\n'
    done

    {
        i=0
        while read -r entry; do
            i=$((i+1))

            # ENTRY="$(sed -n "${i}p" "$queuefile")" \
            ENTRY="$entry"         \
            LOGFILE="$logfile"     \
            QUEUEFILE="$queuefile" \
                task "$i" "$task" "$@" &

        done <<-EOF
        $(cat "$queuefile")
EOF
    } | {
        log_len=0
        padding=1
        # for _ in $(seq 1 $padding); do printf '\n'; done
        printf -- '  ────────────────\n'

        while IFS='	' read -r line; do
            id="$(echo "$line" | cut -f1)"
            mode="$(echo "$line" | cut -f2)"
            msg="$(echo "$line" | cut -f3-)"

            if [ "$mode" = stat ]; then
                ENTRY="$(sed -n "${id}p" "$queuefile")"

                short_path="$(entry_get short)"

                cur_stat="$(
                    printf "(%s/%s) %-20s	%s" \
                        "$id"                   \
                        "$max_id"               \
                        "$short_path"           \
                        "$msg"                  \
                    )"

                lines_up=$(((max_id + 1 - id) + padding + log_len))

                printf "%s" \
                    "$(
                        cursor up $lines_up
                        cursor clear line
                        printf "%s" "$cur_stat"
                        # cursor clear end
                        cursor home
                        cursor down $lines_up
                    )"

            elif [ "$mode" = log ]; then
                ENTRY="$(sed -n "${id}p" "$queuefile")"
                printf '%s: %s\n' "$(entry_get rename-to)" "$msg"
                log_len=$((log_len + 1))
            fi
        done
    }
}

case "$1" in
    run)
        if ! have git; then
            err "command: \`git\` is missing!"
            exit 1
        fi
        shift 1
        run "$@"
        ;;
    clean)
        rm -rf "$SHPLUG_SRC"
        ;;
    *)
        register "$@"
        ;;
esac

# if [ "$1" = "load" ]; then
#     if ! have git; then
#         err "command: \`git\` is missing!"
#         exit 1
#     fi
#     shift 1
#     load "$*"
# else
#     register "$*"
# fi





